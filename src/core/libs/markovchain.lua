--[=[
	boatbomber
	
	Really simple Markov Chain module
	
	MarkovChain.new()
		Returns a Chain object
	
	Chain:Study(string Text, bool IncludePunctuation)
		Parses the words in Text and has the chain "learn" it
		IncludePunctuation is optional and defaults to false
		
	Chain:Generate(number MaxSize)
		Returns a string generated by the chain
		MaxSize is optional and defaults to 10000
	
--]=]

local NOWORD = "\n"

math.randomseed(tick())

local function GetWords(Text, IncludePunctuation)

	local lines = string.split(Text, "\n")
	local lineNum = 1

	local line = lines[lineNum]    -- current line
	local pos = 1             -- current position in the line
	return function ()        -- iterator function
		while line do           -- repeat while there are lines
			local s, e = string.find(line, IncludePunctuation and "%S+" or "%w+", pos)
			if s then      -- found a word?
				pos = e + 1  -- update next position
				return string.sub(line, s, e)   -- return the word
			else
				lineNum = lineNum +1
				line = lines[lineNum]    -- word not found; try next line
				pos = 1             -- restart from first position
			end
		end
		return nil            -- no more lines: end of traversal
	end
end

local MarkovChain = {}

function MarkovChain.new()

	local Chain = {
		StateTable = {};
	}

	function Chain:Study(Text, IncludePunctuation)
		local w1, w2 = NOWORD, NOWORD
		for w in GetWords(Text, IncludePunctuation) do
			local i,v = w1.." "..w2, w
			if not self.StateTable[i] then
				self.StateTable[i] = {n=0}
			end
			self.StateTable[i][#self.StateTable[i]+1] = v

			w1 = w2; w2 = w;
		end

		local i,v = w1.." "..w2, NOWORD
		if not self.StateTable[i] then
			self.StateTable[i] = {n=0}
		end
		self.StateTable[i][#self.StateTable[i]+1] = v
	end

	function Chain:Generate(MaxSize)
		MaxSize = type(MaxSize) == "number" and MaxSize or 10000

		local TextOutput = ""

		local w1,w2 = NOWORD,NOWORD
		for i=1,MaxSize do
			local list = self.StateTable[(w1.." "..w2)]

			-- choose a random item from list
			local r = math.random(#list)
			local nextword = list[r]

			if nextword == NOWORD then break end

			TextOutput = TextOutput..nextword.." "
			w1 = w2; w2 = nextword
		end

		return TextOutput
	end

	return Chain
end

return MarkovChain